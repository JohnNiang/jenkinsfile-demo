pipeline {
  agent {
    node {
      label 'gradle'
    }
  }
  environment {
    GRADLE_CACHE = '/var/data/jenkins_gradle_cache'
  }
  stages {
    stage('halo clone') {
      agent none
      steps {
        git(url: 'https://github.com/halo-dev/halo.git', branch: 'master', changelog: true, poll: false)
        sh 'git submodule update --init --recursive'
      }
    }
    
    stage('prepare gradle cache') {
      agent none
      steps {
        container('gradle') {
          sh 'apt-get update -y && apt-get install -y rsync'
          // Copy the Gradle cache from the host, so we can write to it
          sh 'rsync -a --include /caches --include /wrapper --exclude "/*" ${GRADLE_CACHE}/ ${HOME}/.gradle || true'
        }
      }
    }

    stage('halo test') {
      agent none
      steps {
        container('gradle') {
          sh 'gradle check'
        }

      }
    }

    stage('halo-build') {
      agent none
      steps {
        container('gradle') {
          sh 'gradle build'
        }

      }
    }

  }
  
  post {
    success {
      // Write updates to the Gradle cache back to the host
      sh 'rsync -au ${HOME}/.gradle/caches ${HOME}/.gradle/wrapper ${GRADLE_CACHE}/ || true'
    }
  }
}

